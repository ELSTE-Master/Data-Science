---
title: "Demo page"
format: 
  live-html:
    theme: cosmo
    css: assets/webex_2.css
    include-after-body: assets/webex_2.js
engine: knitr
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Exercise interactive code with hints and solution

:::: {.panel-tabset}

## Exercise

```{pyodide}
#| setup: true
#| exercise: ex_4
import numpy as np
```

```{pyodide}
#| exercise: ex_4
A = np._____([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])
```

## Hints

::: { .hint exercise="ex_4"}
Consider using the `array()` function from `numpy`.

```python
np.array([[1,2], [3,4]])
```
:::

## Solution

::: { .solution exercise="ex_4" }
Use  the `array()` function from `numpy`:


```python
A = np.array([[1, 2, 3], #<1>
              [4, 5, 6],
              [7, 8, 9]])   
```
1. Use `np.array()`
:::

::::


# Interactive code no hint no solution

```{pyodide}
A = np._____([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])
```


## Python code chunk
```{python}
1+1
```
## R code chunk
```{r}
1+1
```



## Iframe 

<iframe src="https://raw.githack.com/stephaneguerrier/data_analytics/master/Lecture1.html#1" width="710" height="530">
</iframe>

## Local pdf slides


<embed src="assets/cours_3.pdf" type="application/pdf" width="100%" height="600px" />







## MCQ 
```{r, echo = FALSE, results='asis'}
knitr::opts_chunk$set(echo = FALSE)
source("assets/q_a_env.R")
```

<!-- MathJax for Rendering Math -->
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js">
</script>


## Question 1

Here is a question.

```{r, results='asis'}
# Define questions choice and individual feedback for each question
opts <- list(
  list(value = "\\(\\frac{1}{10}\\)",
       feedback = "Too small ! 😱"),
  list(value = "\\(\\frac{3}{10}\\)",
       feedback = "Close! "),
  answer = list(
    value = "\\(\\frac{2}{5}\\)",
    feedback = "correct ! 🐉 \\(\\frac{52}{100}\\)"
  ),
  list(
    value = "\\(\\frac{52}{100}\\)",
    feedback = "Not correct with \\(\\frac{52}{100}\\)! 🤓"
  )
)
# render QA environment
render_q_a_env(opts)
small_v_space_html(4)
make_alert_button(message =  "This is a test \\(X\\)", type = "hint2")
small_v_space_html(4)
make_alert_button(message = "Test \\( f_X(x) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} \\exp\\Big(-\\frac{(x-\\mu)^2}{2\\sigma^2}\\Big) \\)", type = "explanation")
```



