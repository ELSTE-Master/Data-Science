{
  "hash": "12c0f4efb6e6e40b0c93e518de34e3bb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Intro to Python and Pandas\"\nsubtitle: \"DataFrames for Data Science\"\ndate: \"October 15, 2025\"\nauthor:\n  - name: Sébastien Biass\n    id: sb\n    orcid: 0000-0002-1919-9473\n    email: sebastien.biasse@unige.ch\n    affiliation: \n      - name: Earth Sciences\n\n---\n\n## Background\n\n::: {.callout-warning}\n## \nWe assume that you all followed Guy Simpson's Python crash course\n:::\n\n\n<span style=\"font-size: 0.5em;\"></span>\n\n`pandas`: A **package** for [data manipulation and analysis]{.bg} handling **structured data**\n\n- **Reading/writing data** from common formats (CSV, Excel, JSON, etc.)\n- Handling **missing data**\n- **Filtering**, **sorting**, **reshaping** and **grouping** data\n- **Aggregating** data (sum, mean, count, etc.)\n- **Time series support** (date ranges, frequency conversions)\n- **Statistical operations**\n\n## Today's objectives\n\nUnderstand what is a `pandas` [DataFrame]{.bg} and its [basic anatomy]{.bg}\n\n- How to [load data]{.bg} in a DataFrame\n- How to [access]{.bg} data → *query by label/position*\n- How to [filter]{.bg} data → *comparison and logical operators*\n- How to [rearrange]{.bg} data → *sorting values*\n- How to [operate]{.bg} on data → *arithmetic and string operations*\n\n# Introduction to pandas {background-color=\"#2F4647\"}\n\n## Anatomy of a DataFrame\n\n![](../class1/img/pandas-1.png)\n\n::: {.fragment}\n- Similar to *Excel* → contains *tabular data* composed of [rows]{.bg} and [columns]{.bg}\n:::\n\n::: {.fragment}\n- In *Excel*:\n  - **Rows** are accessed using *numbers*\n  - **Columns** are accessed using *letters*\n:::\n\n## Anatomy of a DataFrame\n\n![](../class1/img/pandas-2.png)\n\n::: {.fragment}\n- Unlike *Excel*, **rows** and **columns** can be [labelled]{.bg}\n  - [Index]{.bg} refers to the label of the **rows**. In the *index*, **values are usually unique** - meaning that each entry has a different label.\n  - [Column]{.bg} refers to the label of - logically - the **columns**\n:::\n\n# Data structure {background-color=\"#2F4647\"}\n\n## The dataset\n\nSynthetic dataset of **selected volcanic eruptions** → first 5 rows:\n\n<span style=\"font-size: 0.5em;\"></span>\n\n| Name            | Country     | Date                |   VEI |   Latitude |   Longitude |\n|:----------------|:------------|:--------------------|------:|-----------:|------------:|\n| St. Helens      | USA         | 1980-05-18 |     5 |    46.1914 |   -122.196  |\n| Pinatubo        | Philippines | 1991-04-02 |     6 |    15.1501 |    120.347  |\n| El Chichón      | Mexico      | 1982-03-28 |     5 |    17.3559 |    -93.2233 |\n| Galunggung      | Indonesia   | 1982-04-05 |     4 |    -7.2567 |    108.077  |\n| Nevado del Ruiz | Colombia    | 1985-11-13 |     3 |     4.895  |    -75.322  |\n\n## Volcanic explosivity index (VEI)\n\n![](img/vei.jpeg)\n\n## Setting up the notebook {auto-animate=\"true\"}\n\n- We start by importing the `pandas` library\n- We import it under the name [pd]{.bg} - which is faster to type!\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#dc2cc00a .cell execution_count=1}\n``` {.python .cell-code}\n# Import the required packages\nimport pandas as pd\n```\n:::\n\n\n## Setting up the notebook {auto-animate=\"true\"}\n\n- We then load the specified data with the `pd.read_csv()` function\n- This returns a [DataFrame]{.bg} object in a variable named `df`\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#5c8968a9 .cell execution_count=2}\n``` {.python .cell-code}\n# Import the required packages\n %>% \n\n# Read the data\ndf = pd.read_csv('data/dummy_volcanoes.csv', parse_dates=['Date']) # Load data\n```\n:::\n\n\n## Setting up the notebook {auto-animate=\"true\"}\n\n- We print some data for inspection with `df.head()`\n- The functions are now directly called from the [DataFrame]{.bg} `df` object \n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#9aa9797f .cell execution_count=3}\n``` {.python .cell-code}\n# Import the required packages\nimport pandas as pd\n\n# Read the data\ndf = pd.read_csv('../class1/data/dummy_volcanoes.csv', parse_dates=['Date']) # Load data\n\n# Show the first 3 rows\ndf.head(3) \n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>St. Helens</td>\n      <td>USA</td>\n      <td>1980-05-18</td>\n      <td>5</td>\n      <td>46.1914</td>\n      <td>-122.1956</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Pinatubo</td>\n      <td>Philippines</td>\n      <td>1991-04-02</td>\n      <td>6</td>\n      <td>15.1501</td>\n      <td>120.3465</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>El Chichón</td>\n      <td>Mexico</td>\n      <td>1982-03-28</td>\n      <td>5</td>\n      <td>17.3559</td>\n      <td>-93.2233</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Setting the index\n\n![](../class1/img/pandas-2.png)\n\n## Setting the index\n\n- ...for now, the index (**→ the first column)** is and *integer*\n- This might be acceptable in datasets where the *label* is not important\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#89be10b9 .cell execution_count=4}\n``` {.python .cell-code}\n# Show the first 3 rows\ndf.head(3) \n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>St. Helens</td>\n      <td>USA</td>\n      <td>1980-05-18</td>\n      <td>5</td>\n      <td>46.1914</td>\n      <td>-122.1956</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Pinatubo</td>\n      <td>Philippines</td>\n      <td>1991-04-02</td>\n      <td>6</td>\n      <td>15.1501</td>\n      <td>120.3465</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>El Chichón</td>\n      <td>Mexico</td>\n      <td>1982-03-28</td>\n      <td>5</td>\n      <td>17.3559</td>\n      <td>-93.2233</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Setting the index\n\n- Here we want to access the data using the **name of the volcano**\n- We **set the index** using `set_index()`\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#a81b491f .cell execution_count=5}\n``` {.python .cell-code}\n# Set the index to the 'Name' column\ndf = df.set_index('Name')\n\n# Show the first 3 rows\ndf.head(3) \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>St. Helens</th>\n      <td>USA</td>\n      <td>1980-05-18</td>\n      <td>5</td>\n      <td>46.1914</td>\n      <td>-122.1956</td>\n    </tr>\n    <tr>\n      <th>Pinatubo</th>\n      <td>Philippines</td>\n      <td>1991-04-02</td>\n      <td>6</td>\n      <td>15.1501</td>\n      <td>120.3465</td>\n    </tr>\n    <tr>\n      <th>El Chichón</th>\n      <td>Mexico</td>\n      <td>1982-03-28</td>\n      <td>5</td>\n      <td>17.3559</td>\n      <td>-93.2233</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Exploring data\n\n- Here are some **basic functions** to review the structure of the dataset:\n\n<span style=\"font-size: 0.5em;\"></span>\n\n\n| Function     | Description                                                                                   |\n|--------------|-----------------------------------------------------------------------------------------------|\n| `df.head()`  | Prints the *first* 5 rows of the DataFrame.                                                   |\n| `df.tail()`  | Prints the *last* 5 rows of the DataFrame.                                                    |\n| `df.info()`  | Displays some info about the DataFrame, including the number of rows (*entries*) and columns. |\n| `df.shape`   | Returns a list containing the number of rows and columns of the DataFrame.                    |\n| `df.index`   | Returns a list containing the index along the *rows* of the DataFrame.                        |\n| `df.columns` | Returns a list containing the index along the *columns* of the DataFrame.                     |\n\n\n## Sorting data {auto-animate=\"true\"}\n\n- Sorting [numerical]{.bg}, [datetime]{.bg} or [strings]{.bg} using `.sort_values`\n- Importance of [documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html) to understand [arguments]{.bg}\n\n::: {#ee09eb73 .cell execution_count=6}\n``` {.python .cell-code}\ndf.sort_values('VEI').head() # Sort volcanoes by VEI in ascending number\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Nyiragongo</th>\n      <td>DR Congo</td>\n      <td>2021-05-22</td>\n      <td>1</td>\n      <td>-1.5200</td>\n      <td>29.2500</td>\n    </tr>\n    <tr>\n      <th>Ontake</th>\n      <td>Japan</td>\n      <td>2014-09-27</td>\n      <td>2</td>\n      <td>35.5149</td>\n      <td>137.4781</td>\n    </tr>\n    <tr>\n      <th>Etna</th>\n      <td>Italy</td>\n      <td>2021-03-16</td>\n      <td>2</td>\n      <td>37.7510</td>\n      <td>15.0044</td>\n    </tr>\n    <tr>\n      <th>Merapi</th>\n      <td>Indonesia</td>\n      <td>2023-12-03</td>\n      <td>2</td>\n      <td>-7.5407</td>\n      <td>110.4457</td>\n    </tr>\n    <tr>\n      <th>Kīlauea</th>\n      <td>USA</td>\n      <td>2018-05-03</td>\n      <td>2</td>\n      <td>19.4194</td>\n      <td>-155.2811</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Sorting data {auto-animate=\"true\"}\n\n- Sorting [numerical]{.bg}, [datetime]{.bg} or [strings]{.bg} using `.sort_values`\n- Importance of [documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html) to understand [arguments]{.bg}\n\n::: {#9a7940aa .cell execution_count=7}\n``` {.python .cell-code}\ndf.sort_values('VEI').head() # Sort volcanoes by VEI in ascending number\ndf.sort_values('Date', ascending=False).head() # Sort volcanoes by eruption dates from recent to old\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Merapi</th>\n      <td>Indonesia</td>\n      <td>2023-12-03</td>\n      <td>2</td>\n      <td>-7.5407</td>\n      <td>110.4457</td>\n    </tr>\n    <tr>\n      <th>Cleveland</th>\n      <td>USA</td>\n      <td>2023-05-23</td>\n      <td>3</td>\n      <td>52.8250</td>\n      <td>-169.9444</td>\n    </tr>\n    <tr>\n      <th>Sinabung</th>\n      <td>Indonesia</td>\n      <td>2023-02-13</td>\n      <td>3</td>\n      <td>3.1719</td>\n      <td>98.3925</td>\n    </tr>\n    <tr>\n      <th>Nyiragongo</th>\n      <td>DR Congo</td>\n      <td>2021-05-22</td>\n      <td>1</td>\n      <td>-1.5200</td>\n      <td>29.2500</td>\n    </tr>\n    <tr>\n      <th>La Soufrière</th>\n      <td>Saint Vincent</td>\n      <td>2021-04-09</td>\n      <td>4</td>\n      <td>13.2833</td>\n      <td>-61.3875</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Sorting data {auto-animate=\"true\"}\n\n- Sorting [numerical]{.bg}, [datetime]{.bg} or [strings]{.bg} using `.sort_values`\n- Importance of [documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html) to understand [arguments]{.bg}\n\n::: {#536aad55 .cell execution_count=8}\n``` {.python .cell-code}\ndf.sort_values('VEI').head() # Sort volcanoes by VEI in ascending number\ndf.sort_values('Date', ascending=False).head() # Sort volcanoes by eruption dates from recent to old\ndf.sort_values('Country').head() # Also works on strings to sort alphabetically\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n    <tr>\n      <th>Nevado del Ruiz</th>\n      <td>Colombia</td>\n      <td>1985-11-13</td>\n      <td>3</td>\n      <td>4.8950</td>\n      <td>-75.3220</td>\n    </tr>\n    <tr>\n      <th>Nyiragongo</th>\n      <td>DR Congo</td>\n      <td>2021-05-22</td>\n      <td>1</td>\n      <td>-1.5200</td>\n      <td>29.2500</td>\n    </tr>\n    <tr>\n      <th>Eyjafjallajökull</th>\n      <td>Iceland</td>\n      <td>2010-04-14</td>\n      <td>4</td>\n      <td>63.6333</td>\n      <td>-19.6111</td>\n    </tr>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>1982-04-05</td>\n      <td>4</td>\n      <td>-7.2567</td>\n      <td>108.0771</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Sorting data {auto-animate=\"true\"}\n\n- Sorting [numerical]{.bg}, [datetime]{.bg} or [strings]{.bg} using `.sort_values`\n- Importance of [documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html) to understand [arguments]{.bg}\n\n::: {#448615f8 .cell execution_count=9}\n``` {.python .cell-code}\ndf.sort_values('VEI').head() # Sort volcanoes by VEI in ascending number\ndf.sort_values('Date', ascending=False).head() # Sort volcanoes by eruption dates from recent to old\ndf.sort_values('Country').head() # Also works on strings to sort alphabetically\ndf.sort_values(['Latitude', 'Longitude']).head() # Sorting using multiple columns\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n    <tr>\n      <th>Agung</th>\n      <td>Indonesia</td>\n      <td>2017-11-21</td>\n      <td>3</td>\n      <td>-8.3422</td>\n      <td>115.5083</td>\n    </tr>\n    <tr>\n      <th>Merapi</th>\n      <td>Indonesia</td>\n      <td>2023-12-03</td>\n      <td>2</td>\n      <td>-7.5407</td>\n      <td>110.4457</td>\n    </tr>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>1982-04-05</td>\n      <td>4</td>\n      <td>-7.2567</td>\n      <td>108.0771</td>\n    </tr>\n    <tr>\n      <th>Tavurvur</th>\n      <td>Papua New Guinea</td>\n      <td>2014-08-29</td>\n      <td>3</td>\n      <td>-4.3494</td>\n      <td>152.2847</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Querying data {background-color=\"#2F4647\"}\n\n\n## Accessing data in a DataFrame\n\n\n![](../class1/img/pandas-2.png)\n\n\n## Accessing data in a DataFrame\n\n**Option 1**: [label-based]{.bg} indexing\n\n- Use the [labels]{.bg} of **index** and **columns** to retrieve data\n- Function to use: `df.loc`\n\n::: {.fragment}\n![](../class1/img/pandas_loc.png)\n:::\n\n\n\n## Accessing data in a DataFrame\n\n**Option 2**: [position-based]{.bg} indexing\n\n- Use the [positions]{.bg} of **index** and **columns** to retrieve data\n- Function to use: `df.iloc`\n\n::: {.fragment}\n![](../class1/img/pandas_iloc.png)\n:::\n\n## Label-based indexing: Rows\n\n- **Query a [row]{.bg}** with `.loc` → Use **square brackets** `[ ]`\n  - Query the *row* for which the *index label* is `Calbuco`\n  - Returns all *columns*\n\n<span style=\"font-size: 0.5em;\"></span>\n\n:::: {.columns}\n::: {.column width=\"48%\"}\n::: {.fragment}\n\n::: {#68b37795 .cell execution_count=10}\n``` {.python .cell-code}\ndf.loc['Calbuco']\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nCountry                    Chile\nDate         2015-04-22 00:00:00\nVEI                            4\nLatitude                -41.2972\nLongitude               -72.6097\nName: Calbuco, dtype: object\n```\n:::\n:::\n\n\n→ Returns a [pd.Series]{.bg}\n:::\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.fragment}\n\n::: {#dd011198 .cell execution_count=11}\n``` {.python .cell-code}\ndf.loc[['Calbuco']]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n→ Returns a [pd.DataFrame]{.bg}\n\n:::\n:::\n::::\n\n\n## Label-based indexing: Rows\n\n- **Query [multiple rows]{.bg}**  with `.loc`\n  - Query the *rows* for which the *index labels* are `Calbuco` or `Taal`\n  - Returns all *columns*\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {.fragment}\n\n::: {#1bf3b50e .cell execution_count=12}\n``` {.python .cell-code}\ndf.loc[['Calbuco', 'Taal']]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n    <tr>\n      <th>Taal</th>\n      <td>Philippines</td>\n      <td>2020-01-12</td>\n      <td>4</td>\n      <td>14.0020</td>\n      <td>120.9934</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n## Label-based indexing: Columns\n\n- **Query [columns]{.bg}** \n  - Query the *columns* for which the *column labels* are `Country` or `VEI`\n  - Returns all *rows*\n\n:::: {.columns}\n::: {.column width=\"48%\"}\n::: {.fragment}\n\n- **Option 1**: [with]{.bg} `.loc`:\n\n::: {#c928958c .cell execution_count=13}\n``` {.python .cell-code}\ndf.loc[:, ['Country', 'VEI']].head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>VEI</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>St. Helens</th>\n      <td>USA</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Pinatubo</th>\n      <td>Philippines</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>El Chichón</th>\n      <td>Mexico</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.fragment}\n- **Option 2**: [without]{.bg} `.loc`:\n\n::: {#4310080b .cell execution_count=14}\n``` {.python .cell-code}\ndf[['Country', 'VEI']].head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>VEI</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>St. Helens</th>\n      <td>USA</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Pinatubo</th>\n      <td>Philippines</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>El Chichón</th>\n      <td>Mexico</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n::::\n\n## Label-based indexing: Rows and Columns\n\n- Again, choice on whether to use `.loc` to query columns\n\n:::: {.columns}\n::: {.column width=\"48%\"}\n::: {.fragment}\n\n- **Option 1**: Columns are specified [inside]{.bg} `.loc`:\n\n::: {#6e689bee .cell execution_count=15}\n``` {.python .cell-code}\ndf.loc[['Calbuco', 'Taal'], ['Country', 'VEI']].head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>VEI</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Taal</th>\n      <td>Philippines</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.fragment}\n- **Option 2**: Columns are specified [outside]{.bg} `.loc`:\n\n::: {#2738aa2f .cell execution_count=16}\n``` {.python .cell-code}\ndf.loc[['Calbuco', 'Taal']][['Country', 'VEI']].head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>VEI</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Taal</th>\n      <td>Philippines</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n::::\n\n\n\n## Position-based indexing: Rows\n\n- **Query a [row]{.bg}** with `.iloc`\n  - Returns all *columns*\n\n<span style=\"font-size: 0.5em;\"></span>\n\n:::: {.columns}\n::: {.column width=\"48%\"}\n::: {.fragment}\n\n- **One row** (first row):\n\n::: {#2c42827e .cell execution_count=17}\n``` {.python .cell-code}\ndf.iloc[[0]]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>St. Helens</th>\n      <td>USA</td>\n      <td>1980-05-18</td>\n      <td>5</td>\n      <td>46.1914</td>\n      <td>-122.1956</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.fragment}\n- **Range of rows**: (rows 3-4):\n\n::: {#8923096f .cell execution_count=18}\n``` {.python .cell-code}\ndf.iloc[2:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>El Chichón</th>\n      <td>Mexico</td>\n      <td>1982-03-28</td>\n      <td>5</td>\n      <td>17.3559</td>\n      <td>-93.2233</td>\n    </tr>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>1982-04-05</td>\n      <td>4</td>\n      <td>-7.2567</td>\n      <td>108.0771</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n::::\n\n\n## Position-based indexing: Rows\n\n- Query rows [from the end]{.bg}:\n- Example:\n  - Get the **last 5 rows** of the DataFrame:\n\n::: {#c812495a .cell execution_count=19}\n``` {.python .cell-code}\ndf.iloc[-5:]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>La Soufrière</th>\n      <td>Saint Vincent</td>\n      <td>2021-04-09</td>\n      <td>4</td>\n      <td>13.2833</td>\n      <td>-61.3875</td>\n    </tr>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n    <tr>\n      <th>St. Augustine</th>\n      <td>USA</td>\n      <td>2006-03-27</td>\n      <td>3</td>\n      <td>57.8819</td>\n      <td>-155.5611</td>\n    </tr>\n    <tr>\n      <th>Eyjafjallajökull</th>\n      <td>Iceland</td>\n      <td>2010-04-14</td>\n      <td>4</td>\n      <td>63.6333</td>\n      <td>-19.6111</td>\n    </tr>\n    <tr>\n      <th>Cleveland</th>\n      <td>USA</td>\n      <td>2023-05-23</td>\n      <td>3</td>\n      <td>52.8250</td>\n      <td>-169.9444</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Position-based and label-based queries\n\n- Mix [position-based]{.bg} and [label-based]{.bg} indexing:\n  - **Rows** → *labels*\n  - **Columns** → *positions*\n\n::: {#32b417c7 .cell execution_count=20}\n``` {.python .cell-code}\ndf.iloc[0:5][['Country', 'VEI']]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>VEI</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>St. Helens</th>\n      <td>USA</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Pinatubo</th>\n      <td>Philippines</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>El Chichón</th>\n      <td>Mexico</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Nevado del Ruiz</th>\n      <td>Colombia</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Filtering data {background-color=\"#2F4647\"}\n\n## Boolean indexing\n\n- **Filtering** data with [boolean indexing]{.bg}\n  - Returns either `True` or `False` depending on whether the **condition** is satisfied\n\n\n:::: {.columns}\n\n::: {.column width=\"25%\"}\n::: {.fragment}\n- Example:\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#d7c31868 .cell execution_count=21}\n``` {.python .cell-code}\na = 1\nb = 2\n```\n:::\n\n\n:::\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"65%\"}\n::: {.fragment}\n\n- **Comparison operators**:\n\n| Operator | Meaning                | Example      | Result      |\n|----------|------------------------|--------------|-------------|\n| `==`     | Equal to               | `a == b`     | `False`     |\n| `!=`     | Not equal to           | `a != b`     | `True`      |\n| `>`      | Greater than           | `a > b`      | `False`     |\n| `<`      | Less than              | `a < b`      | `True`      |\n| `>=`     | Greater than or equal  | `a >= b`     | `False`     |\n| `<=`     | Less than or equal     | `a <= b`     | `True`      |\n:::\n:::\n\n::::\n\n\n## Boolean indexing: Example  {auto-animate=\"true\"}\n\n- Query all volcanoes where `VEI == 4`\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#b78a0a96 .cell execution_count=22}\n``` {.python .cell-code}\ndf['VEI'] == 4\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nName\nSt. Helens          False\nPinatubo            False\nEl Chichón          False\nGalunggung           True\nNevado del Ruiz     False\nMerapi              False\nOntake              False\nSoufrière Hills     False\nEtna                False\nNyiragongo          False\nKīlauea             False\nAgung               False\nTavurvur            False\nSinabung            False\nTaal                 True\nLa Soufrière         True\nCalbuco              True\nSt. Augustine       False\nEyjafjallajökull     True\nCleveland           False\nName: VEI, dtype: bool\n```\n:::\n:::\n\n\n## Boolean indexing: Example  {auto-animate=\"true\"}\n\n- Query all volcanoes where `VEI == 4`\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {#64bc3a95 .cell execution_count=23}\n``` {.python .cell-code}\ndf.loc[df['VEI'] == 4]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>1982-04-05</td>\n      <td>4</td>\n      <td>-7.2567</td>\n      <td>108.0771</td>\n    </tr>\n    <tr>\n      <th>Taal</th>\n      <td>Philippines</td>\n      <td>2020-01-12</td>\n      <td>4</td>\n      <td>14.0020</td>\n      <td>120.9934</td>\n    </tr>\n    <tr>\n      <th>La Soufrière</th>\n      <td>Saint Vincent</td>\n      <td>2021-04-09</td>\n      <td>4</td>\n      <td>13.2833</td>\n      <td>-61.3875</td>\n    </tr>\n    <tr>\n      <th>Calbuco</th>\n      <td>Chile</td>\n      <td>2015-04-22</td>\n      <td>4</td>\n      <td>-41.2972</td>\n      <td>-72.6097</td>\n    </tr>\n    <tr>\n      <th>Eyjafjallajökull</th>\n      <td>Iceland</td>\n      <td>2010-04-14</td>\n      <td>4</td>\n      <td>63.6333</td>\n      <td>-19.6111</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Boolean indexing: Strings\n\n- **Filtering** also works with [strings]{.bg}\n  - Use **string comparison** operations\n\n<span style=\"font-size: 0.5em;\"></span>\n\n- **Example**:\n\n::: {#b6039ad7 .cell execution_count=24}\n``` {.python .cell-code}\ndf.loc[df['Country'] == 'Indonesia']\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Date</th>\n      <th>VEI</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Galunggung</th>\n      <td>Indonesia</td>\n      <td>1982-04-05</td>\n      <td>4</td>\n      <td>-7.2567</td>\n      <td>108.0771</td>\n    </tr>\n    <tr>\n      <th>Merapi</th>\n      <td>Indonesia</td>\n      <td>2023-12-03</td>\n      <td>2</td>\n      <td>-7.5407</td>\n      <td>110.4457</td>\n    </tr>\n    <tr>\n      <th>Agung</th>\n      <td>Indonesia</td>\n      <td>2017-11-21</td>\n      <td>3</td>\n      <td>-8.3422</td>\n      <td>115.5083</td>\n    </tr>\n    <tr>\n      <th>Sinabung</th>\n      <td>Indonesia</td>\n      <td>2023-02-13</td>\n      <td>3</td>\n      <td>3.1719</td>\n      <td>98.3925</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Boolean indexing: Strings\n\n- **Filtering** also works with [strings]{.bg}\n  - Use **string comparison** operations\n\n<span style=\"font-size: 0.5em;\"></span>\n\n- **String comparison operators**:\n<span style=\"font-size: 0.5em;\"></span>\n\n| Operation         | Example                                 | Description                                         |\n|-------------------|-----------------------------------------|-----------------------------------------------------|\n| contains          | `df['Name'].str.contains('Soufrière')`  | Checks if each string contains a substring          |\n| startswith        | `df['Name'].str.startswith('E')`        | Checks if each string starts with a substring       |\n| endswith          | `df['Name'].str.endswith('o')`          | Checks if each string ends with a substring         |\n\n\n\n# Operations {background-color=\"#2F4647\"}\n\n## Data management operations\n\n- Common [data management]{.bg} functions for pandas columns:\n\n| Operation         | Example                                 | Description                                         |\n|-------------------|-----------------------------------------|-----------------------------------------------------|\n| Round             | `df['VEI'].round(1)`                    | Rounds values to the specified number of decimals   |\n| Floor             | `df['VEI'].apply(np.floor)`             | Rounds values down to the nearest integer           |\n| Ceil              | `df['VEI'].apply(np.ceil)`              | Rounds values up to the nearest integer             |\n| Absolute value    | `df['VEI'].abs()`                       | Returns the absolute value of each element          |\n| Fill missing      | `df['VEI'].fillna(0)`                   | Replaces missing values with a specified value      |\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {.fragment}\n- Round the `'Latitude'` to two decimals → [make sure you store the output]{.bg}!\n\n::: {#fe070ec1 .cell execution_count=25}\n``` {.python .cell-code}\ndf['Latitude'] = df['Latitude'].round(2)\n```\n:::\n\n\n:::\n\n## Arithmetic operations\n\n- [Arithmetic operations]{.bg} on parts of the DataFrame (→ *columns*) using native Python arithmetic operators\n\n| Operation      | Symbol | Example                | Description                                 |\n|----------------|--------|------------------------|---------------------------------------------|\n| Addition       | `+`    | `df['VEI'] + 1`        | Adds a value to each element                |\n| Subtraction    | `-`    | `df['VEI'] - 1`        | Subtracts a value from each element         |\n| Multiplication | `*`    | `df['VEI'] * 2`        | Multiplies each element by a value          |\n| Division       | `/`    | `df['VEI'] / 2`        | Divides each element by a value             |\n| Exponentiation | `**`   | `df['VEI'] ** 2`       | Raises each element to a power              |\n| Modulo         | `%`    | `df['VEI'] % 2`        | Remainder after division for each element   |\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {.fragment}\n- Divide `VEI` by 2 and store results a new column (→ `VEI_haved`)\n\n::: {#55b60c56 .cell execution_count=26}\n``` {.python .cell-code}\ndf['VEI_halved'] = df['VEI'] / 2\n```\n:::\n\n\n:::\n\n## Expanded arithmetic operations\n\n- The range of [arithmetic operations]{.bg} can be expanded using `numpy`\n\n\n| Operation         | Symbol       | Example                        | Description                                      |\n|-------------------|--------------------------|--------------------------------|--------------------------------------------------|\n| Exponentiation    | `np.power`      | `np.power(df['VEI'], 2)`       | Element-wise exponentiation                      |\n| Square root       | `np.sqrt`                | `np.sqrt(df['VEI'])`           | Element-wise square root                         |\n| Logarithm (base e)| `np.log`                 | `np.log(df['VEI'])`            | Element-wise natural logarithm                   |\n| Logarithm (base 10)| `np.log10`              | `np.log10(df['VEI'])`          | Element-wise base-10 logarithm                   |\n| Exponential       | `np.exp`                 | `np.exp(df['VEI'])`            | Element-wise exponential (e^x)                   |\n\n<span style=\"font-size: 0.5em;\"></span>\n\n::: {.fragment}\n- Divide `VEI` by 2 and store results a new column (→ `VEI_haved`)\n\n::: {#60095513 .cell execution_count=27}\n``` {.python .cell-code}\ndf['VEI_square'] = np.power(df['VEI'], 2)\n```\n:::\n\n\n:::\n\n",
    "supporting": [
      "class1_pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}